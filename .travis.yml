# This is the http://travis-ci.org configuration file for Natron
env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "lyS1r5djAjsX9GW2etArPgtP4OM5Jd9clWajd/JHVmajrL3XVSkkbSVl9jypukZ/dfiBSODxGiwVTp+kGa82ptS9jl1z3ouoezZR+zro5grb9d7bjteJU8HWfUB4Ey9jCCjzAOc+Gh1hwJB2ZnCfU6NylRWLXA7Q9TtGiFsQJoAGU7TCXGTgmzzE6oUE74FsnSR9KEJs7K1eDVIYvRD2mkYGu/2DBTjb6CmxXaB+dSoCEYCubnszgigJx2H/ihcgu01KT9DEaDQjZLTSJ1vrG611eS0LgXxQdMAEV29fhmLYBIeUsH6zsf9OIKd3l84KUT3YbxThgD3v2PpQ1U/YQIzZjywOuWPfgMNd2W3Ebret7u+u0LNo/vz7YcZ64+v9SFEH6zyZDp50sP4vWa7C8Rolx0dqEw0E1gxsICZn4OUVgwdFRRTG9I9AoRhNYu290DVaWrU0n/f40uVzzZAWNQZQzGMcunRn3o5UDVM5vQ+8eMIfvB4YHc6X+NZXBLdr56H1ijJVPqb3oT+qDjjuTYae5j1p+ro8yioT0CjgnOPF2Y/q3ktKWTB8sa3qM4izbkHqBJ4Qa8BcnCZi0ZJDkvyqa054Fvyb1qLtQUeEIovi07zrsZgTeLM4SNECMHm22PF/lWiIFrGHknZKspkphwVs7GxvHLWVgOQ881EXVpc="
   # Coverity run condition (avoid matrix multiple runs), need customized
   # build script. Need an update if new matrix cases.
   - coverity_scan_run_condition='"$CC" = gcc -a "$TRAVIS_OS_NAME" != osx'
   # Coverity script test mode (if true no uploading, avoid reaching the quota)
   # usual processing: false.
   - coverity_scan_script_test_mode=false

language: cpp

python:
  - "2.7"

addons:
  apt:
    sources:
    # Natron requires boost >= 1.49 to compile in C++11 mode
    # see http://stackoverflow.com/questions/11302758/error-while-copy-constructing-boostshared-ptr-using-c11
    # we could use the ppa:boost-latest/ppa for that purpose (boost 1.55), but this is for precise only
    # (ppa:afrank/boost offers 1.57, but is not whitelisted)
    #- boost-latest
    # samuel-bachmann/boost has a backport of boost 1.60.0 for trusty (not whitelisted)
    #- sourceline "ppa:samuel-bachmann/boost"
    # kubuntu-ppa/backports contains OpenCV
    - kubuntu-backports
    # the PPA xorg-edgers contains cairo 1.12 (required for rotoscoping)
    # NOT WHITELISTED https://github.com/travis-ci/apt-source-whitelist/issues/181
    # (ppa:ricotz/testing contains cairo 1.14, but only for trusty)
    - sourceline: 'ppa:xorg-edgers/ppa'
    # ubuntu-toolchain-r/test contains recent versions of gcc
    - ubuntu-toolchain-r-test
    # get a recent ffmpeg (>=2.5) for precise from ppa:archivematica/externals(2.5.1) or ppa:pavlyshko/precise(2.6.1) or ppa:spvkgn/ffmpeg-dev(2.8.6)
    # NOT WHITELISTED
    #- sourceline: 'ppa:spvkgn/ffmpeg-dev'
    # this one is for trusty ffmpeg
    - sourceline: 'ppa:jonathonf/ffmpeg-3'
    #- kalakris-cmake
    - pythonxy-devel
    packages:
    #- gcc-4.9
    #- g++-4.9
    #- gcc-5
    #- g++-5
    #- gcc-6
    #- g++-6
    - gcc-7
    - g++-7
    #- gcc-8
    #- g++-8
    - libqt4-dev
    - libqt4-opengl-dev
    - libglew-dev
    #- libboost1.55-dev
    #- libboost-math1.55-dev
    #- libboost-serialization1.55-dev
    #- libboost-filesystem1.55-dev
    #- libboost-regex1.55-dev
    #- libboost-thread1.55-dev
    #- libboost-system1.55-dev
    - libexpat1-dev
    - gdb
    - libcairo2-dev
    - python-dev
    - python-pyside
    - libpyside-dev
    - libshiboken-dev
    # packages for building openfx-io:
    #- libavcodec-dev
    #- libavformat-dev
    #- libswscale-dev
    #- libavutil-dev
    #- libswresample-dev
    - libtinyxml-dev
    - liblcms2-dev
    - libyaml-cpp-dev
    #- libopenexr-dev
    #- libilmbase-dev
    - libopenjpeg-dev
    - libtiff4-dev
    - libjpeg-dev
    - libpng-dev
    - libwebp-dev
    - libraw-dev
    - libfreetype6-dev
    - libssl-dev
  coverity_scan:
    # customized build script URL
    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built
    # TRAVIS_BRANCH: name of the branch currently being built
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
    # project metadata
    project:
      name: $TRAVIS_REPO_SLUG
    # Where email notification of build analysis results will be sent
    notification_email: frederic.devernay@m4x.org
    # Commands to prepare for build_command
    #build_command_prepend: ./configure
    # This command will be added as an argument to "cov-build" to compile
    # the project for analysis
    build_command: "tools/travis/build.sh"
    # Pattern to match selecting branches that will run analysis
    branch_pattern: coverity_scan

matrix:
  include:
    - os: linux
      dist: trusty
      sudo: required
      compiler: gcc
    - os: linux
      dist: trusty
      sudo: required
      compiler: clang
    - os: osx
      # see https://docs.travis-ci.com/user/osx-ci-environment/
      # we use macOS 10.12 to get the precompiled pyside bottles from
      # https://github.com/cartr/homebrew-qt4
      # see https://docs.travis-ci.com/user/reference/osx/#OS-X-Version
      osx_image: xcode9.2
      compiler: clang
  exclude:
    - os: osx
      compiler: gcc
#  allow_failures:
#    - os: osx # if we exceed the time limit
  fast_finish: true

cache:
  apt: true
#  directories:
#  - /usr/local/Cellar

# Travis CI has 1.5 cores per VM, take advantage of it
before_install:
  - date -u
  - uname -a
  - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
  - export J='-j2'

install:
  - . tools/travis/coverity_env.sh
  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]];
    then
        exit 0;
    fi
  - tools/travis/install_dependencies.sh
  - if [ ! -d "$HOME/OpenColorIO-Configs" ]; then
      pushd $HOME;
      curl -k -L https://github.com/NatronGitHub/OpenColorIO-Configs/archive/Natron-v2.3.tar.gz | tar -xvzf -;
      mv OpenColorIO-Configs-Natron-v2.3 OpenColorIO-Configs;
      popd;
    else
      echo 'Using cached OpenColorIO-Configs';
    fi

# OSX build will timeout if we redirect its output
#> install_dependencies.log 2>&1

cache:
  directories:
    - $HOME/openexr
    - $HOME/ocio
    - $HOME/oiio
    - $HOME/seexpr

script:
  - if [[ ${COVERITY_SCAN_BRANCH} == 1 ]];
    then
      echo "Don't build on coverity_scan branch.";
      exit 0;
    fi
  - tools/travis/build.sh

after_success:
  - if [ "$CC" = "gcc" -a "$TRAVIS_OS_NAME" == "linux"  ]; then ln -s Tests/google-mock Tests/google-test .; cd Tests; gcov -lp *.gcno > /dev/null; cd ..; coveralls -n --exclude /usr/include --exclude 'Tests/google-test' --exclude 'Tests/google-mock' --exclude 'google-test' --exclude 'google-mock' --exclude 'libs/OpenFX' --exclude-pattern '.*/moc_.*\.cpp' --exclude-pattern='.*/Tests/.*\.cpp' --exclude-pattern='.*/Tests/.*\.h'; fi
#  - if [ "$CC" = "gcc" -a "$TRAVIS_OS_NAME" == "linux" ]; then ln -s Tests/google-mock Tests/google-test .; coveralls --exclude /usr/include --exclude 'Tests/google-test' --exclude 'Tests/google-mock' --exclude 'google-test' --exclude 'google-mock' --exclude 'libs/OpenFX' --exclude-pattern '.*/moc_.*\.cpp' --exclude-pattern='.*/Tests/.*\.cpp' --exclude-pattern='.*/Tests/.*\.h' --gcov-options '\-lp'; fi

after_failure:
  - cat install_dependencies.log || true

