diff --git a/libs/yaml-cpp/include/include/anchor.h b/libs/yaml-cpp/include/include/anchor.h
index 06759c7..c0791cc 100644
--- a/libs/yaml-cpp/include/include/anchor.h
+++ b/libs/yaml-cpp/include/include/anchor.h
@@ -9,9 +9,11 @@
 
 #include <cstddef>
 
-namespace YAML {
+#include "version.h"
+
+YAML_NAMESPACE_ENTER
 typedef std::size_t anchor_t;
 const anchor_t NullAnchor = 0;
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // ANCHOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/binary.h b/libs/yaml-cpp/include/include/binary.h
index 29d5dbd..f0ba274 100644
--- a/libs/yaml-cpp/include/include/binary.h
+++ b/libs/yaml-cpp/include/include/binary.h
@@ -10,9 +10,9 @@
 #include <string>
 #include <vector>
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 YAML_CPP_API std::string EncodeBase64(const unsigned char *data,
                                       std::size_t size);
 YAML_CPP_API std::vector<unsigned char> DecodeBase64(const std::string &input);
@@ -62,6 +62,6 @@ class YAML_CPP_API Binary {
   const unsigned char *m_unownedData;
   std::size_t m_unownedSize;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // BASE64_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/contrib/anchordict.h b/libs/yaml-cpp/include/include/contrib/anchordict.h
index b4677e2..b998dad 100644
--- a/libs/yaml-cpp/include/include/contrib/anchordict.h
+++ b/libs/yaml-cpp/include/include/contrib/anchordict.h
@@ -11,7 +11,7 @@
 
 #include "../anchor.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 /// AnchorDict
 /// . An object that stores and retrieves values correlating to anchor_t
 ///   values.
@@ -32,6 +32,6 @@ class AnchorDict {
  private:
   std::vector<T> m_data;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // ANCHORDICT_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/contrib/graphbuilder.h b/libs/yaml-cpp/include/include/contrib/graphbuilder.h
index 7c2159b..1c8736c 100644
--- a/libs/yaml-cpp/include/include/contrib/graphbuilder.h
+++ b/libs/yaml-cpp/include/include/contrib/graphbuilder.h
@@ -7,10 +7,10 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/mark.h"
+#include "mark.h"
 #include <string>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Parser;
 
 // GraphBuilderInterface
@@ -142,6 +142,6 @@ typename Impl::Node *BuildGraphOfNextDocument(Parser &parser, Impl &impl) {
   return static_cast<typename Impl::Node *>(
       BuildGraphOfNextDocument(parser, graphBuilder));
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // GRAPHBUILDER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/dll.h b/libs/yaml-cpp/include/include/dll.h
index 827e0f1..7bb0b8c 100644
--- a/libs/yaml-cpp/include/include/dll.h
+++ b/libs/yaml-cpp/include/include/dll.h
@@ -7,6 +7,8 @@
 #pragma once
 #endif
 
+#include "version.h"
+
 // The following ifdef block is the standard way of creating macros which make
 // exporting
 // from a DLL simpler. All files within this DLL are compiled with the
diff --git a/libs/yaml-cpp/include/include/emitfromevents.h b/libs/yaml-cpp/include/include/emitfromevents.h
index f14b051..fbceaec 100644
--- a/libs/yaml-cpp/include/include/emitfromevents.h
+++ b/libs/yaml-cpp/include/include/emitfromevents.h
@@ -9,15 +9,15 @@
 
 #include <stack>
 
-#include "yaml-cpp/anchor.h"
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/eventhandler.h"
+#include "anchor.h"
+#include "emitterstyle.h"
+#include "eventhandler.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Emitter;
 
 class EmitFromEvents : public EventHandler {
@@ -52,6 +52,6 @@ class EmitFromEvents : public EventHandler {
   };
   std::stack<State::value> m_stateStack;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITFROMEVENTS_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/emitter.h b/libs/yaml-cpp/include/include/emitter.h
index cc49659..e1a24c7 100644
--- a/libs/yaml-cpp/include/include/emitter.h
+++ b/libs/yaml-cpp/include/include/emitter.h
@@ -12,20 +12,20 @@
 #include <sstream>
 #include <string>
 
-#include "yaml-cpp/binary.h"
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/emitterdef.h"
-#include "yaml-cpp/emittermanip.h"
-#include "yaml-cpp/noncopyable.h"
-#include "yaml-cpp/null.h"
-#include "yaml-cpp/ostream_wrapper.h"
-
-namespace YAML {
+#include "binary.h"
+#include "dll.h"
+#include "emitterdef.h"
+#include "emittermanip.h"
+#include "noncopyable.h"
+#include "null.h"
+#include "ostream_wrapper.h"
+
+YAML_NAMESPACE_ENTER
 class Binary;
 struct _Null;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class EmitterState;
 
 class YAML_CPP_API Emitter : private noncopyable {
@@ -249,6 +249,6 @@ inline Emitter& operator<<(Emitter& emitter, _Indent indent) {
 inline Emitter& operator<<(Emitter& emitter, _Precision precision) {
   return emitter.SetLocalPrecision(precision);
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/emitterdef.h b/libs/yaml-cpp/include/include/emitterdef.h
index 0b42695..700ce63 100644
--- a/libs/yaml-cpp/include/include/emitterdef.h
+++ b/libs/yaml-cpp/include/include/emitterdef.h
@@ -7,10 +7,10 @@
 #pragma once
 #endif
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct EmitterNodeType {
   enum value { NoType, Property, Scalar, FlowSeq, BlockSeq, FlowMap, BlockMap };
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITTERDEF_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/emittermanip.h b/libs/yaml-cpp/include/include/emittermanip.h
index 89f7256..b2a74bf 100644
--- a/libs/yaml-cpp/include/include/emittermanip.h
+++ b/libs/yaml-cpp/include/include/emittermanip.h
@@ -9,7 +9,7 @@
 
 #include <string>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 enum EMITTER_MANIP {
   // general manipulators
   Auto,
@@ -132,6 +132,6 @@ inline _Precision FloatPrecision(int n) { return _Precision(n, -1); }
 inline _Precision DoublePrecision(int n) { return _Precision(-1, n); }
 
 inline _Precision Precision(int n) { return _Precision(n, n); }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITTERMANIP_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/emitterstyle.h b/libs/yaml-cpp/include/include/emitterstyle.h
index 67bb398..880360c 100644
--- a/libs/yaml-cpp/include/include/emitterstyle.h
+++ b/libs/yaml-cpp/include/include/emitterstyle.h
@@ -7,10 +7,12 @@
 #pragma once
 #endif
 
-namespace YAML {
+#include "version.h"
+
+YAML_NAMESPACE_ENTER
 struct EmitterStyle {
   enum value { Default, Block, Flow };
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITTERSTYLE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/eventhandler.h b/libs/yaml-cpp/include/include/eventhandler.h
index efe381c..c7fdd08 100644
--- a/libs/yaml-cpp/include/include/eventhandler.h
+++ b/libs/yaml-cpp/include/include/eventhandler.h
@@ -9,10 +9,10 @@
 
 #include <string>
 
-#include "yaml-cpp/anchor.h"
-#include "yaml-cpp/emitterstyle.h"
+#include "anchor.h"
+#include "emitterstyle.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
 
 class EventHandler {
@@ -35,6 +35,6 @@ class EventHandler {
                           anchor_t anchor, EmitterStyle::value style) = 0;
   virtual void OnMapEnd() = 0;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EVENTHANDLER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/exceptions.h b/libs/yaml-cpp/include/include/exceptions.h
index 285fc33..3cc7bf6 100644
--- a/libs/yaml-cpp/include/include/exceptions.h
+++ b/libs/yaml-cpp/include/include/exceptions.h
@@ -7,13 +7,13 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/mark.h"
-#include "yaml-cpp/traits.h"
+#include "mark.h"
+#include "traits.h"
 #include <stdexcept>
 #include <string>
 #include <sstream>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 // error messages
 namespace ErrorMsg {
 const char* const YAML_DIRECTIVE_ARGS =
@@ -226,6 +226,6 @@ class BadFile : public Exception {
  public:
   BadFile() : Exception(Mark::null_mark(), ErrorMsg::BAD_FILE) {}
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EXCEPTIONS_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/mark.h b/libs/yaml-cpp/include/include/mark.h
index bf94b4f..8c4f194 100644
--- a/libs/yaml-cpp/include/include/mark.h
+++ b/libs/yaml-cpp/include/include/mark.h
@@ -7,9 +7,9 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct YAML_CPP_API Mark {
   Mark() : pos(0), line(0), column(0) {}
 
@@ -24,6 +24,6 @@ struct YAML_CPP_API Mark {
   Mark(int pos_, int line_, int column_)
       : pos(pos_), line(line_), column(column_) {}
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // MARK_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/convert.h b/libs/yaml-cpp/include/include/node/convert.h
index f388a67..b820961 100644
--- a/libs/yaml-cpp/include/include/node/convert.h
+++ b/libs/yaml-cpp/include/include/node/convert.h
@@ -13,21 +13,21 @@
 #include <sstream>
 #include <vector>
 
-#include "yaml-cpp/binary.h"
-#include "yaml-cpp/node/impl.h"
-#include "yaml-cpp/node/iterator.h"
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/type.h"
-#include "yaml-cpp/null.h"
-
-namespace YAML {
+#include "binary.h"
+#include "node/impl.h"
+#include "node/iterator.h"
+#include "node/node.h"
+#include "node/type.h"
+#include "null.h"
+
+YAML_NAMESPACE_ENTER
 class Binary;
 struct _Null;
 template <typename T>
 struct convert;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace conversion {
 inline bool IsInfinity(const std::string& input) {
   return input == ".inf" || input == ".Inf" || input == ".INF" ||
@@ -292,6 +292,6 @@ struct convert<Binary> {
     return true;
   }
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_CONVERT_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/bool_type.h b/libs/yaml-cpp/include/include/node/detail/bool_type.h
index 2c80705..db9dd5c 100644
--- a/libs/yaml-cpp/include/include/node/detail/bool_type.h
+++ b/libs/yaml-cpp/include/include/node/detail/bool_type.h
@@ -7,7 +7,7 @@
 #pragma once
 #endif
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 struct unspecified_bool {
   struct NOT_ALLOWED;
@@ -15,12 +15,12 @@ struct unspecified_bool {
 };
 typedef void (*unspecified_bool_type)(unspecified_bool::NOT_ALLOWED*);
 }
-}
+YAML_NAMESPACE_EXIT
 
 #define YAML_CPP_OPERATOR_BOOL()                                            \
-  operator YAML::detail::unspecified_bool_type() const {                    \
+  operator YAML_NAMESPACE::detail::unspecified_bool_type() const {          \
     return this->operator!() ? 0                                            \
-                             : &YAML::detail::unspecified_bool::true_value; \
+                             : &YAML_NAMESPACE::detail::unspecified_bool::true_value; \
   }
 
 #endif  // NODE_DETAIL_BOOL_TYPE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/impl.h b/libs/yaml-cpp/include/include/node/detail/impl.h
index f6d218c..976489a 100644
--- a/libs/yaml-cpp/include/include/node/detail/impl.h
+++ b/libs/yaml-cpp/include/include/node/detail/impl.h
@@ -7,11 +7,11 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/node/detail/node.h"
-#include "yaml-cpp/node/detail/node_data.h"
+#include "node/detail/node.h"
+#include "node/detail/node_data.h"
 #include <boost/type_traits.hpp>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 template <typename Key, typename Enable = void>
 struct get_idx {
@@ -172,6 +172,6 @@ inline node& node_data::convert_to_node(const T& rhs,
   return *value.m_pNode;
 }
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_DETAIL_IMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/iterator.h b/libs/yaml-cpp/include/include/node/detail/iterator.h
index 2c701af..5f717bc 100644
--- a/libs/yaml-cpp/include/include/node/detail/iterator.h
+++ b/libs/yaml-cpp/include/include/node/detail/iterator.h
@@ -7,13 +7,13 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/ptr.h"
-#include "yaml-cpp/node/detail/node_iterator.h"
+#include "dll.h"
+#include "node/ptr.h"
+#include "node/detail/node_iterator.h"
 #include <boost/iterator/iterator_adaptor.hpp>
 #include <boost/utility.hpp>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 struct iterator_value;
 
@@ -60,6 +60,6 @@ class iterator_base
   shared_memory_holder m_pMemory;
 };
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_DETAIL_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/iterator_fwd.h b/libs/yaml-cpp/include/include/node/detail/iterator_fwd.h
index c54a258..c5e7a75 100644
--- a/libs/yaml-cpp/include/include/node/detail/iterator_fwd.h
+++ b/libs/yaml-cpp/include/include/node/detail/iterator_fwd.h
@@ -7,12 +7,12 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 #include <list>
 #include <utility>
 #include <vector>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class node;
 
 namespace detail {
@@ -23,6 +23,6 @@ class iterator_base;
 
 typedef detail::iterator_base<detail::iterator_value> iterator;
 typedef detail::iterator_base<const detail::iterator_value> const_iterator;
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_DETAIL_ITERATOR_FWD_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/memory.h b/libs/yaml-cpp/include/include/node/detail/memory.h
index 8f2bc26..ea8e5ab 100644
--- a/libs/yaml-cpp/include/include/node/detail/memory.h
+++ b/libs/yaml-cpp/include/include/node/detail/memory.h
@@ -9,16 +9,16 @@
 
 #include <set>
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/ptr.h"
+#include "dll.h"
+#include "node/ptr.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node;
 }  // namespace detail
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class YAML_CPP_API memory {
  public:
@@ -41,6 +41,6 @@ class YAML_CPP_API memory_holder {
   shared_memory m_pMemory;
 };
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_DETAIL_MEMORY_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/node.h b/libs/yaml-cpp/include/include/node/detail/node.h
index bbb497d..485918d 100644
--- a/libs/yaml-cpp/include/include/node/detail/node.h
+++ b/libs/yaml-cpp/include/include/node/detail/node.h
@@ -7,15 +7,15 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/type.h"
-#include "yaml-cpp/node/ptr.h"
-#include "yaml-cpp/node/detail/node_ref.h"
+#include "emitterstyle.h"
+#include "dll.h"
+#include "node/type.h"
+#include "node/ptr.h"
+#include "node/detail/node_ref.h"
 #include <set>
 #include <boost/utility.hpp>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node : private boost::noncopyable {
  public:
@@ -165,6 +165,6 @@ class node : private boost::noncopyable {
   nodes m_dependencies;
 };
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_DETAIL_NODE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/node_data.h b/libs/yaml-cpp/include/include/node/detail/node_data.h
index 6030867..aca8d67 100644
--- a/libs/yaml-cpp/include/include/node/detail/node_data.h
+++ b/libs/yaml-cpp/include/include/node/detail/node_data.h
@@ -15,19 +15,19 @@
 #include <utility>
 #include <vector>
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/detail/node_iterator.h"
-#include "yaml-cpp/node/iterator.h"
-#include "yaml-cpp/node/ptr.h"
-#include "yaml-cpp/node/type.h"
+#include "dll.h"
+#include "node/detail/node_iterator.h"
+#include "node/iterator.h"
+#include "node/ptr.h"
+#include "node/type.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node;
 }  // namespace detail
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class YAML_CPP_API node_data : private boost::noncopyable {
  public:
@@ -122,6 +122,6 @@ class YAML_CPP_API node_data : private boost::noncopyable {
   mutable kv_pairs m_undefinedPairs;
 };
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_DETAIL_NODE_DATA_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/node_iterator.h b/libs/yaml-cpp/include/include/node/detail/node_iterator.h
index 9669c81..16b8d60 100644
--- a/libs/yaml-cpp/include/include/node/detail/node_iterator.h
+++ b/libs/yaml-cpp/include/include/node/detail/node_iterator.h
@@ -7,15 +7,15 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/ptr.h"
+#include "dll.h"
+#include "node/ptr.h"
 #include <boost/iterator/iterator_facade.hpp>
 #include <boost/utility/enable_if.hpp>
 #include <map>
 #include <utility>
 #include <vector>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 struct iterator_type {
   enum value { None, Sequence, Map };
@@ -154,6 +154,6 @@ class node_iterator_base
 typedef node_iterator_base<node> node_iterator;
 typedef node_iterator_base<const node> const_node_iterator;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_DETAIL_NODE_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/detail/node_ref.h b/libs/yaml-cpp/include/include/node/detail/node_ref.h
index 26b1872..9c69bc9 100644
--- a/libs/yaml-cpp/include/include/node/detail/node_ref.h
+++ b/libs/yaml-cpp/include/include/node/detail/node_ref.h
@@ -7,13 +7,13 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/type.h"
-#include "yaml-cpp/node/ptr.h"
-#include "yaml-cpp/node/detail/node_data.h"
+#include "dll.h"
+#include "node/type.h"
+#include "node/ptr.h"
+#include "node/detail/node_data.h"
 #include <boost/utility.hpp>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node_ref : private boost::noncopyable {
  public:
@@ -92,6 +92,6 @@ class node_ref : private boost::noncopyable {
   shared_node_data m_pData;
 };
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_DETAIL_NODE_REF_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/emit.h b/libs/yaml-cpp/include/include/node/emit.h
index 7c55af2..43f806f 100644
--- a/libs/yaml-cpp/include/include/node/emit.h
+++ b/libs/yaml-cpp/include/include/node/emit.h
@@ -10,9 +10,9 @@
 #include <string>
 #include <iosfwd>
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Emitter;
 class Node;
 
@@ -20,6 +20,6 @@ YAML_CPP_API Emitter& operator<<(Emitter& out, const Node& node);
 YAML_CPP_API std::ostream& operator<<(std::ostream& out, const Node& node);
 
 YAML_CPP_API std::string Dump(const Node& node);
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_EMIT_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/impl.h b/libs/yaml-cpp/include/include/node/impl.h
index 50af6b6..718196c 100644
--- a/libs/yaml-cpp/include/include/node/impl.h
+++ b/libs/yaml-cpp/include/include/node/impl.h
@@ -7,14 +7,14 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/iterator.h"
-#include "yaml-cpp/node/detail/memory.h"
-#include "yaml-cpp/node/detail/node.h"
-#include "yaml-cpp/exceptions.h"
+#include "node/node.h"
+#include "node/iterator.h"
+#include "node/detail/memory.h"
+#include "node/detail/node.h"
+#include "exceptions.h"
 #include <string>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 inline Node::Node() : m_isValid(true), m_pNode(NULL) {}
 
 inline Node::Node(NodeType::value type)
@@ -202,7 +202,7 @@ inline Node& Node::operator=(const T& rhs) {
   return *this;
 }
 
-inline void Node::reset(const YAML::Node& rhs) {
+inline void Node::reset(const YAML_NAMESPACE::Node& rhs) {
   if (!m_isValid || !rhs.m_isValid)
     throw InvalidNode();
   m_pMemory = rhs.m_pMemory;
@@ -443,6 +443,6 @@ inline void Node::force_insert(const Key& key, const Value& value) {
 
 // free functions
 inline bool operator==(const Node& lhs, const Node& rhs) { return lhs.is(rhs); }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_IMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/iterator.h b/libs/yaml-cpp/include/include/node/iterator.h
index 366a9c8..6eff92c 100644
--- a/libs/yaml-cpp/include/include/node/iterator.h
+++ b/libs/yaml-cpp/include/include/node/iterator.h
@@ -7,15 +7,15 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/detail/iterator_fwd.h"
-#include "yaml-cpp/node/detail/iterator.h"
+#include "dll.h"
+#include "node/node.h"
+#include "node/detail/iterator_fwd.h"
+#include "node/detail/iterator.h"
 #include <list>
 #include <utility>
 #include <vector>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 struct iterator_value : public Node, std::pair<Node, Node> {
   iterator_value() {}
@@ -26,6 +26,6 @@ struct iterator_value : public Node, std::pair<Node, Node> {
       : Node(Node::ZombieNode), std::pair<Node, Node>(key, value) {}
 };
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_ITERATOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/node.h b/libs/yaml-cpp/include/include/node/node.h
index 1207f6e..c2011a2 100644
--- a/libs/yaml-cpp/include/include/node/node.h
+++ b/libs/yaml-cpp/include/include/node/node.h
@@ -9,23 +9,23 @@
 
 #include <stdexcept>
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/mark.h"
-#include "yaml-cpp/node/detail/bool_type.h"
-#include "yaml-cpp/node/detail/iterator_fwd.h"
-#include "yaml-cpp/node/ptr.h"
-#include "yaml-cpp/node/type.h"
-
-namespace YAML {
+#include "dll.h"
+#include "emitterstyle.h"
+#include "mark.h"
+#include "node/detail/bool_type.h"
+#include "node/detail/iterator_fwd.h"
+#include "node/ptr.h"
+#include "node/type.h"
+
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node;
 class node_data;
 struct iterator_value;
 }  // namespace detail
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class YAML_CPP_API Node {
  public:
   friend class NodeBuilder;
@@ -38,8 +38,8 @@ class YAML_CPP_API Node {
   template <typename T, typename S>
   friend struct as_if;
 
-  typedef YAML::iterator iterator;
-  typedef YAML::const_iterator const_iterator;
+  typedef YAML_NAMESPACE::iterator iterator;
+  typedef YAML_NAMESPACE::const_iterator const_iterator;
 
   Node();
   explicit Node(NodeType::value type);
@@ -49,7 +49,7 @@ class YAML_CPP_API Node {
   Node(const Node& rhs);
   ~Node();
 
-  YAML::Mark Mark() const;
+  YAML_NAMESPACE::Mark Mark() const;
   NodeType::value Type() const;
   bool IsDefined() const;
   bool IsNull() const { return Type() == NodeType::Null; }
@@ -140,6 +140,6 @@ YAML_CPP_API Node Clone(const Node& node);
 
 template <typename T>
 struct convert;
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_NODE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/parse.h b/libs/yaml-cpp/include/include/node/parse.h
index 0ea4948..685352b 100644
--- a/libs/yaml-cpp/include/include/node/parse.h
+++ b/libs/yaml-cpp/include/include/node/parse.h
@@ -11,9 +11,9 @@
 #include <string>
 #include <vector>
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Node;
 
 YAML_CPP_API Node Load(const std::string& input);
@@ -25,6 +25,6 @@ YAML_CPP_API std::vector<Node> LoadAll(const std::string& input);
 YAML_CPP_API std::vector<Node> LoadAll(const char* input);
 YAML_CPP_API std::vector<Node> LoadAll(std::istream& input);
 YAML_CPP_API std::vector<Node> LoadAllFromFile(const std::string& filename);
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_PARSE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/ptr.h b/libs/yaml-cpp/include/include/node/ptr.h
index 64c8689..c2cd7ef 100644
--- a/libs/yaml-cpp/include/include/node/ptr.h
+++ b/libs/yaml-cpp/include/include/node/ptr.h
@@ -7,10 +7,10 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 #include <boost/shared_ptr.hpp>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node;
 class node_ref;
@@ -24,6 +24,6 @@ typedef boost::shared_ptr<node_data> shared_node_data;
 typedef boost::shared_ptr<memory_holder> shared_memory_holder;
 typedef boost::shared_ptr<memory> shared_memory;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_PTR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/node/type.h b/libs/yaml-cpp/include/include/node/type.h
index 9d55ca9..fb047b2 100644
--- a/libs/yaml-cpp/include/include/node/type.h
+++ b/libs/yaml-cpp/include/include/node/type.h
@@ -7,10 +7,10 @@
 #pragma once
 #endif
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct NodeType {
   enum value { Undefined, Null, Scalar, Sequence, Map };
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // VALUE_TYPE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/noncopyable.h b/libs/yaml-cpp/include/include/noncopyable.h
index a261040..df03641 100644
--- a/libs/yaml-cpp/include/include/noncopyable.h
+++ b/libs/yaml-cpp/include/include/noncopyable.h
@@ -7,9 +7,9 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 // this is basically boost::noncopyable
 class YAML_CPP_API noncopyable {
  protected:
@@ -20,6 +20,6 @@ class YAML_CPP_API noncopyable {
   noncopyable(const noncopyable&);
   const noncopyable& operator=(const noncopyable&);
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NONCOPYABLE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/null.h b/libs/yaml-cpp/include/include/null.h
index 5dbda9a..cb0cce6 100644
--- a/libs/yaml-cpp/include/include/null.h
+++ b/libs/yaml-cpp/include/include/null.h
@@ -7,9 +7,9 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Node;
 
 struct YAML_CPP_API _Null {};
@@ -19,6 +19,6 @@ inline bool operator!=(const _Null&, const _Null&) { return false; }
 YAML_CPP_API bool IsNull(const Node& node);  // old API only
 
 extern YAML_CPP_API _Null Null;
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NULL_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/ostream_wrapper.h b/libs/yaml-cpp/include/include/ostream_wrapper.h
index 09d45f3..24d9886 100644
--- a/libs/yaml-cpp/include/include/ostream_wrapper.h
+++ b/libs/yaml-cpp/include/include/ostream_wrapper.h
@@ -10,9 +10,9 @@
 #include <string>
 #include <vector>
 
-#include "yaml-cpp/dll.h"
+#include "dll.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class YAML_CPP_API ostream_wrapper {
  public:
   ostream_wrapper();
@@ -67,6 +67,6 @@ inline ostream_wrapper& operator<<(ostream_wrapper& stream, char ch) {
   stream.write(&ch, 1);
   return stream;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // OSTREAM_WRAPPER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/parser.h b/libs/yaml-cpp/include/include/parser.h
index 24880e4..ee6221a 100644
--- a/libs/yaml-cpp/include/include/parser.h
+++ b/libs/yaml-cpp/include/include/parser.h
@@ -10,10 +10,10 @@
 #include <ios>
 #include <memory>
 
-#include "yaml-cpp/dll.h"
-#include "yaml-cpp/noncopyable.h"
+#include "dll.h"
+#include "noncopyable.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class EventHandler;
 class Node;
 class Scanner;
@@ -43,6 +43,6 @@ class YAML_CPP_API Parser : private noncopyable {
   std::auto_ptr<Scanner> m_pScanner;
   std::auto_ptr<Directives> m_pDirectives;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // PARSER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/stlemitter.h b/libs/yaml-cpp/include/include/stlemitter.h
index 06780c8..49b456d 100644
--- a/libs/yaml-cpp/include/include/stlemitter.h
+++ b/libs/yaml-cpp/include/include/stlemitter.h
@@ -12,7 +12,7 @@
 #include <set>
 #include <map>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 template <typename Seq>
 inline Emitter& EmitSeq(Emitter& emitter, const Seq& seq) {
   emitter << BeginSeq;
@@ -46,6 +46,6 @@ inline Emitter& operator<<(Emitter& emitter, const std::map<K, V>& m) {
   emitter << EndMap;
   return emitter;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // STLEMITTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/include/traits.h b/libs/yaml-cpp/include/include/traits.h
index f33d0e1..d21292e 100644
--- a/libs/yaml-cpp/include/include/traits.h
+++ b/libs/yaml-cpp/include/include/traits.h
@@ -7,7 +7,7 @@
 #pragma once
 #endif
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 template <typename>
 struct is_numeric {
   enum { value = false };
@@ -98,6 +98,6 @@ struct disable_if_c<true, T> {};
 
 template <class Cond, class T = void>
 struct disable_if : public disable_if_c<Cond::value, T> {};
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // TRAITS_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/include/yaml.h b/libs/yaml-cpp/include/yaml.h
index 7f515ef..cab0e74 100644
--- a/libs/yaml-cpp/include/yaml.h
+++ b/libs/yaml-cpp/include/yaml.h
@@ -7,18 +7,20 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/parser.h"
-#include "yaml-cpp/emitter.h"
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/stlemitter.h"
-#include "yaml-cpp/exceptions.h"
+#include "include/parser.h"
+#include "include/emitter.h"
+#include "include/emitterstyle.h"
+#include "include/stlemitter.h"
+#include "include/exceptions.h"
 
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/impl.h"
-#include "yaml-cpp/node/convert.h"
-#include "yaml-cpp/node/iterator.h"
-#include "yaml-cpp/node/detail/impl.h"
-#include "yaml-cpp/node/parse.h"
-#include "yaml-cpp/node/emit.h"
+#include "include/node/node.h"
+#include "include/node/impl.h"
+#include "include/node/convert.h"
+#include "include/node/iterator.h"
+#include "include/node/detail/impl.h"
+#include "include/node/parse.h"
+#include "include/node/emit.h"
+
+#include "include/version.h"
 
 #endif  // YAML_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/binary.cpp b/libs/yaml-cpp/src/binary.cpp
index a7e5130..eaf0a69 100644
--- a/libs/yaml-cpp/src/binary.cpp
+++ b/libs/yaml-cpp/src/binary.cpp
@@ -1,6 +1,6 @@
-#include "yaml-cpp/binary.h"
+#include "binary.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 static const char encoding[] =
     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
 
@@ -90,4 +90,4 @@ std::vector<unsigned char> DecodeBase64(const std::string &input) {
   ret.resize(out - &ret[0]);
   return ret;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/collectionstack.h b/libs/yaml-cpp/src/collectionstack.h
index 2302786..1238302 100644
--- a/libs/yaml-cpp/src/collectionstack.h
+++ b/libs/yaml-cpp/src/collectionstack.h
@@ -10,7 +10,9 @@
 #include <stack>
 #include <cassert>
 
-namespace YAML {
+#include "version.h"
+
+YAML_NAMESPACE_ENTER
 struct CollectionType {
   enum value { NoCollection, BlockMap, BlockSeq, FlowMap, FlowSeq, CompactMap };
 };
@@ -34,6 +36,6 @@ class CollectionStack {
  private:
   std::stack<CollectionType::value> collectionStack;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // COLLECTIONSTACK_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/contrib/graphbuilder.cpp b/libs/yaml-cpp/src/contrib/graphbuilder.cpp
index 416c135..ec21ce7 100644
--- a/libs/yaml-cpp/src/contrib/graphbuilder.cpp
+++ b/libs/yaml-cpp/src/contrib/graphbuilder.cpp
@@ -1,8 +1,8 @@
 #include "graphbuilderadapter.h"
 
-#include "yaml-cpp/parser.h"  // IWYU pragma: keep
+#include "parser.h"  // IWYU pragma: keep
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class GraphBuilderInterface;
 
 void* BuildGraphOfNextDocument(Parser& parser,
@@ -14,4 +14,4 @@ void* BuildGraphOfNextDocument(Parser& parser,
     return NULL;
   }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/contrib/graphbuilderadapter.cpp b/libs/yaml-cpp/src/contrib/graphbuilderadapter.cpp
index 02a3d97..fc1d6a9 100644
--- a/libs/yaml-cpp/src/contrib/graphbuilderadapter.cpp
+++ b/libs/yaml-cpp/src/contrib/graphbuilderadapter.cpp
@@ -1,7 +1,7 @@
 #include "graphbuilderadapter.h"
-#include "yaml-cpp/contrib/graphbuilder.h"
+#include "contrib/graphbuilder.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
 
 int GraphBuilderAdapter::ContainerFrame::sequenceMarker;
@@ -91,4 +91,4 @@ void GraphBuilderAdapter::DispositionNode(void *pNode) {
     m_builder.AppendToSequence(pContainer, pNode);
   }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/contrib/graphbuilderadapter.h b/libs/yaml-cpp/src/contrib/graphbuilderadapter.h
index 0d1e579..a9f82d6 100644
--- a/libs/yaml-cpp/src/contrib/graphbuilderadapter.h
+++ b/libs/yaml-cpp/src/contrib/graphbuilderadapter.h
@@ -11,18 +11,18 @@
 #include <map>
 #include <stack>
 
-#include "yaml-cpp/anchor.h"
-#include "yaml-cpp/contrib/anchordict.h"
-#include "yaml-cpp/contrib/graphbuilder.h"
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/eventhandler.h"
+#include "anchor.h"
+#include "contrib/anchordict.h"
+#include "contrib/graphbuilder.h"
+#include "emitterstyle.h"
+#include "eventhandler.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class GraphBuilderInterface;
 struct Mark;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class GraphBuilderAdapter : public EventHandler {
  public:
   GraphBuilderAdapter(GraphBuilderInterface& builder)
@@ -74,6 +74,6 @@ class GraphBuilderAdapter : public EventHandler {
   void RegisterAnchor(anchor_t anchor, void* pNode);
   void DispositionNode(void* pNode);
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // GRAPHBUILDERADAPTER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/convert.cpp b/libs/yaml-cpp/src/convert.cpp
index ec05b77..099b943 100644
--- a/libs/yaml-cpp/src/convert.cpp
+++ b/libs/yaml-cpp/src/convert.cpp
@@ -1,6 +1,6 @@
 #include <algorithm>
 
-#include "yaml-cpp/node/convert.h"
+#include "node/convert.h"
 
 namespace {
 // we're not gonna mess with the mess that is all the isupper/etc. functions
@@ -41,7 +41,7 @@ bool IsFlexibleCase(const std::string& str) {
 }
 }
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 bool convert<bool>::decode(const Node& node, bool& rhs) {
   if (!node.IsScalar())
     return false;
@@ -72,4 +72,4 @@ bool convert<bool>::decode(const Node& node, bool& rhs) {
 
   return false;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/directives.cpp b/libs/yaml-cpp/src/directives.cpp
index 963bd2c..8a6d74a 100644
--- a/libs/yaml-cpp/src/directives.cpp
+++ b/libs/yaml-cpp/src/directives.cpp
@@ -1,6 +1,6 @@
 #include "directives.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 Directives::Directives() {
   // version
   version.isDefault = true;
@@ -19,4 +19,4 @@ const std::string Directives::TranslateTagHandle(
 
   return it->second;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/directives.h b/libs/yaml-cpp/src/directives.h
index 333af26..6a6ca67 100644
--- a/libs/yaml-cpp/src/directives.h
+++ b/libs/yaml-cpp/src/directives.h
@@ -9,8 +9,9 @@
 
 #include <string>
 #include <map>
+#include "version.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Version {
   bool isDefault;
   int major, minor;
@@ -24,6 +25,6 @@ struct Directives {
   Version version;
   std::map<std::string, std::string> tags;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // DIRECTIVES_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/emit.cpp b/libs/yaml-cpp/src/emit.cpp
index 5fb593b..c57abd9 100644
--- a/libs/yaml-cpp/src/emit.cpp
+++ b/libs/yaml-cpp/src/emit.cpp
@@ -1,9 +1,9 @@
-#include "yaml-cpp/node/emit.h"
-#include "yaml-cpp/emitfromevents.h"
-#include "yaml-cpp/emitter.h"
+#include "node/emit.h"
+#include "emitfromevents.h"
+#include "emitter.h"
 #include "nodeevents.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 Emitter& operator<<(Emitter& out, const Node& node) {
   EmitFromEvents emitFromEvents(out);
   NodeEvents events(node);
@@ -22,4 +22,4 @@ std::string Dump(const Node& node) {
   emitter << node;
   return emitter.c_str();
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/emitfromevents.cpp b/libs/yaml-cpp/src/emitfromevents.cpp
index 45c5b99..1bf0f03 100644
--- a/libs/yaml-cpp/src/emitfromevents.cpp
+++ b/libs/yaml-cpp/src/emitfromevents.cpp
@@ -1,24 +1,24 @@
 #include <cassert>
 #include <sstream>
 
-#include "yaml-cpp/emitfromevents.h"
-#include "yaml-cpp/emitter.h"
-#include "yaml-cpp/emittermanip.h"
-#include "yaml-cpp/null.h"
+#include "emitfromevents.h"
+#include "emitter.h"
+#include "emittermanip.h"
+#include "null.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
-}  // namespace YAML
+}  // YAML_NAMESPACE_ENTER
 
 namespace {
-std::string ToString(YAML::anchor_t anchor) {
+std::string ToString(YAML_NAMESPACE::anchor_t anchor) {
   std::stringstream stream;
   stream << anchor;
   return stream.str();
 }
 }
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 EmitFromEvents::EmitFromEvents(Emitter& emitter) : m_emitter(emitter) {}
 
 void EmitFromEvents::OnDocumentStart(const Mark&) {}
@@ -116,4 +116,4 @@ void EmitFromEvents::EmitProps(const std::string& tag, anchor_t anchor) {
   if (anchor)
     m_emitter << Anchor(ToString(anchor));
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/emitter.cpp b/libs/yaml-cpp/src/emitter.cpp
index ebeb059..ad3ba64 100644
--- a/libs/yaml-cpp/src/emitter.cpp
+++ b/libs/yaml-cpp/src/emitter.cpp
@@ -2,12 +2,12 @@
 
 #include "emitterutils.h"
 #include "indentation.h"  // IWYU pragma: keep
-#include "yaml-cpp/emitter.h"
-#include "yaml-cpp/emitterdef.h"
-#include "yaml-cpp/emittermanip.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
+#include "emitter.h"
+#include "emitterdef.h"
+#include "emittermanip.h"
+#include "exceptions.h"  // IWYU pragma: keep
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Binary;
 struct _Null;
 
@@ -684,7 +684,7 @@ Emitter& Emitter::Write(const std::string& str) {
                                  m_pState->CurGroupFlowType(), escapeNonAscii);
 
   if (strFormat == StringFormat::Literal)
-    m_pState->SetMapKeyFormat(YAML::LongKey, FmtScope::Local);
+    m_pState->SetMapKeyFormat(YAML_NAMESPACE::LongKey, FmtScope::Local);
 
   PrepareNode(EmitterNodeType::Scalar);
 
@@ -908,4 +908,4 @@ Emitter& Emitter::Write(const Binary& binary) {
 
   return *this;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/emitterstate.cpp b/libs/yaml-cpp/src/emitterstate.cpp
index a0874ac..c913e4b 100644
--- a/libs/yaml-cpp/src/emitterstate.cpp
+++ b/libs/yaml-cpp/src/emitterstate.cpp
@@ -1,9 +1,9 @@
 #include <limits>
 
 #include "emitterstate.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
+#include "exceptions.h"  // IWYU pragma: keep
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 EmitterState::EmitterState()
     : m_isGood(true),
       m_curIndent(0),
@@ -347,4 +347,4 @@ bool EmitterState::SetDoublePrecision(int value, FmtScope::value scope) {
   _Set(m_doublePrecision, value, scope);
   return true;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/emitterstate.h b/libs/yaml-cpp/src/emitterstate.h
index 2ddec76..273fb77 100644
--- a/libs/yaml-cpp/src/emitterstate.h
+++ b/libs/yaml-cpp/src/emitterstate.h
@@ -9,15 +9,15 @@
 
 #include "ptr_stack.h"
 #include "setting.h"
-#include "yaml-cpp/emitterdef.h"
-#include "yaml-cpp/emittermanip.h"
+#include "emitterdef.h"
+#include "emittermanip.h"
 #include <cassert>
 #include <vector>
 #include <stack>
 #include <memory>
 #include <stdexcept>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct FmtScope {
   enum value { Local, Global };
 };
@@ -198,6 +198,6 @@ void EmitterState::_Set(Setting<T>& fmt, T value, FmtScope::value scope) {
       assert(false);
   }
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITTERSTATE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/emitterutils.cpp b/libs/yaml-cpp/src/emitterutils.cpp
index 4a4c982..3c3aec9 100644
--- a/libs/yaml-cpp/src/emitterutils.cpp
+++ b/libs/yaml-cpp/src/emitterutils.cpp
@@ -7,10 +7,10 @@
 #include "regex_yaml.h"
 #include "regeximpl.h"
 #include "stringsource.h"
-#include "yaml-cpp/binary.h"  // IWYU pragma: keep
-#include "yaml-cpp/ostream_wrapper.h"
+#include "binary.h"  // IWYU pragma: keep
+#include "ostream_wrapper.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace Utils {
 namespace {
 enum { REPLACEMENT_CHARACTER = 0xFFFD };
@@ -481,4 +481,4 @@ bool WriteBinary(ostream_wrapper& out, const Binary& binary) {
   return true;
 }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/emitterutils.h b/libs/yaml-cpp/src/emitterutils.h
index 3a9c2f8..fc7fd74 100644
--- a/libs/yaml-cpp/src/emitterutils.h
+++ b/libs/yaml-cpp/src/emitterutils.h
@@ -10,14 +10,14 @@
 #include <string>
 
 #include "emitterstate.h"
-#include "yaml-cpp/emittermanip.h"
-#include "yaml-cpp/ostream_wrapper.h"
+#include "emittermanip.h"
+#include "ostream_wrapper.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class ostream_wrapper;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Binary;
 
 struct StringFormat {
@@ -45,6 +45,6 @@ bool WriteTagWithPrefix(ostream_wrapper& out, const std::string& prefix,
                         const std::string& tag);
 bool WriteBinary(ostream_wrapper& out, const Binary& binary);
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EMITTERUTILS_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/exp.cpp b/libs/yaml-cpp/src/exp.cpp
index 695440a..781c166 100644
--- a/libs/yaml-cpp/src/exp.cpp
+++ b/libs/yaml-cpp/src/exp.cpp
@@ -2,13 +2,13 @@
 
 #include "exp.h"
 #include "stream.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
+#include "exceptions.h"  // IWYU pragma: keep
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace Exp {
 unsigned ParseHex(const std::string& str, const Mark& mark) {
   unsigned value = 0;
@@ -133,4 +133,4 @@ std::string Escape(Stream& in) {
   throw ParserException(in.mark(), std::string(ErrorMsg::INVALID_ESCAPE) + ch);
 }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/exp.h b/libs/yaml-cpp/src/exp.h
index f248802..5d726bd 100644
--- a/libs/yaml-cpp/src/exp.h
+++ b/libs/yaml-cpp/src/exp.h
@@ -13,7 +13,7 @@
 #include "regex_yaml.h"
 #include "stream.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 ////////////////////////////////////////////////////////////////////////////////
 // Here we store a bunch of expressions for matching different parts of the
 // file.
@@ -204,6 +204,6 @@ const char FoldedScalar = '>';
 const char VerbatimTagStart = '<';
 const char VerbatimTagEnd = '>';
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // EXP_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/indentation.h b/libs/yaml-cpp/src/indentation.h
index 1a2ccae..edcd4f2 100644
--- a/libs/yaml-cpp/src/indentation.h
+++ b/libs/yaml-cpp/src/indentation.h
@@ -10,9 +10,9 @@
 #include <iostream>
 #include <cstddef>
 
-#include "yaml-cpp/ostream_wrapper.h"
+#include "ostream_wrapper.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Indentation {
   Indentation(std::size_t n_) : n(n_) {}
   std::size_t n;
@@ -36,6 +36,6 @@ inline ostream_wrapper& operator<<(ostream_wrapper& out,
     out << ' ';
   return out;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // INDENTATION_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/memory.cpp b/libs/yaml-cpp/src/memory.cpp
index e5f8a9d..4e93fef 100644
--- a/libs/yaml-cpp/src/memory.cpp
+++ b/libs/yaml-cpp/src/memory.cpp
@@ -1,8 +1,8 @@
-#include "yaml-cpp/node/detail/memory.h"
-#include "yaml-cpp/node/detail/node.h"  // IWYU pragma: keep
-#include "yaml-cpp/node/ptr.h"
+#include "node/detail/memory.h"
+#include "node/detail/node.h"  // IWYU pragma: keep
+#include "node/ptr.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 
 void memory_holder::merge(memory_holder& rhs) {
@@ -23,4 +23,4 @@ void memory::merge(const memory& rhs) {
   m_nodes.insert(rhs.m_nodes.begin(), rhs.m_nodes.end());
 }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/node.cpp b/libs/yaml-cpp/src/node.cpp
index 2088e13..90452f2 100644
--- a/libs/yaml-cpp/src/node.cpp
+++ b/libs/yaml-cpp/src/node.cpp
@@ -1,12 +1,12 @@
-#include "yaml-cpp/node/node.h"
+#include "node/node.h"
 #include "nodebuilder.h"
 #include "nodeevents.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 Node Clone(const Node& node) {
   NodeEvents events(node);
   NodeBuilder builder;
   events.Emit(builder);
   return builder.Root();
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/node_data.cpp b/libs/yaml-cpp/src/node_data.cpp
index a1ca900..340a9f5 100644
--- a/libs/yaml-cpp/src/node_data.cpp
+++ b/libs/yaml-cpp/src/node_data.cpp
@@ -2,15 +2,15 @@
 #include <boost/smart_ptr/shared_ptr.hpp>
 #include <sstream>
 
-#include "yaml-cpp/exceptions.h"
-#include "yaml-cpp/node/detail/memory.h"
-#include "yaml-cpp/node/detail/node.h"  // IWYU pragma: keep
-#include "yaml-cpp/node/detail/node_data.h"
-#include "yaml-cpp/node/detail/node_iterator.h"
-#include "yaml-cpp/node/ptr.h"
-#include "yaml-cpp/node/type.h"
-
-namespace YAML {
+#include "exceptions.h"
+#include "node/detail/memory.h"
+#include "node/detail/node.h"  // IWYU pragma: keep
+#include "node/detail/node_data.h"
+#include "node/detail/node_iterator.h"
+#include "node/ptr.h"
+#include "node/type.h"
+
+YAML_NAMESPACE_ENTER
 namespace detail {
 
 std::string node_data::empty_scalar;
@@ -298,4 +298,4 @@ void node_data::convert_sequence_to_map(shared_memory_holder pMemory) {
   m_type = NodeType::Map;
 }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/nodebuilder.cpp b/libs/yaml-cpp/src/nodebuilder.cpp
index 20ec3ac..69f61bb 100644
--- a/libs/yaml-cpp/src/nodebuilder.cpp
+++ b/libs/yaml-cpp/src/nodebuilder.cpp
@@ -2,12 +2,12 @@
 #include <cassert>
 
 #include "nodebuilder.h"
-#include "yaml-cpp/node/detail/node.h"
-#include "yaml-cpp/node/impl.h"
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/type.h"
+#include "node/detail/node.h"
+#include "node/impl.h"
+#include "node/node.h"
+#include "node/type.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
 
 NodeBuilder::NodeBuilder()
@@ -128,4 +128,4 @@ void NodeBuilder::RegisterAnchor(anchor_t anchor, detail::node& node) {
     m_anchors.push_back(&node);
   }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/nodebuilder.h b/libs/yaml-cpp/src/nodebuilder.h
index a6a47f0..e95ae55 100644
--- a/libs/yaml-cpp/src/nodebuilder.h
+++ b/libs/yaml-cpp/src/nodebuilder.h
@@ -9,19 +9,19 @@
 
 #include <vector>
 
-#include "yaml-cpp/anchor.h"
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/eventhandler.h"
-#include "yaml-cpp/node/ptr.h"
+#include "anchor.h"
+#include "emitterstyle.h"
+#include "eventhandler.h"
+#include "node/ptr.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node;
 }  // namespace detail
 struct Mark;
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Node;
 
 class NodeBuilder : public EventHandler {
@@ -65,6 +65,6 @@ class NodeBuilder : public EventHandler {
   std::vector<PushedKey> m_keys;
   std::size_t m_mapDepth;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_NODEBUILDER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/nodeevents.cpp b/libs/yaml-cpp/src/nodeevents.cpp
index 82261fe..b5a2559 100644
--- a/libs/yaml-cpp/src/nodeevents.cpp
+++ b/libs/yaml-cpp/src/nodeevents.cpp
@@ -1,12 +1,12 @@
 #include "nodeevents.h"
-#include "yaml-cpp/eventhandler.h"
-#include "yaml-cpp/mark.h"
-#include "yaml-cpp/node/detail/node.h"
-#include "yaml-cpp/node/detail/node_iterator.h"
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/type.h"
+#include "eventhandler.h"
+#include "mark.h"
+#include "node/detail/node.h"
+#include "node/detail/node_iterator.h"
+#include "node/node.h"
+#include "node/type.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 void NodeEvents::AliasManager::RegisterReference(const detail::node& node) {
   m_anchorByIdentity.insert(std::make_pair(node.ref(), _CreateNewAnchor()));
 }
@@ -98,4 +98,4 @@ bool NodeEvents::IsAliased(const detail::node& node) const {
   RefCount::const_iterator it = m_refCount.find(node.ref());
   return it != m_refCount.end() && it->second > 1;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/nodeevents.h b/libs/yaml-cpp/src/nodeevents.h
index 49c18eb..6f6bdb5 100644
--- a/libs/yaml-cpp/src/nodeevents.h
+++ b/libs/yaml-cpp/src/nodeevents.h
@@ -10,16 +10,16 @@
 #include <map>
 #include <vector>
 
-#include "yaml-cpp/anchor.h"
-#include "yaml-cpp/node/ptr.h"
+#include "anchor.h"
+#include "node/ptr.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 namespace detail {
 class node;
 }  // namespace detail
-}  // namespace YAML
+YAML_NAMESPACE_EXIT
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class EventHandler;
 class Node;
 
@@ -59,6 +59,6 @@ class NodeEvents {
   typedef std::map<const detail::node_ref*, int> RefCount;
   RefCount m_refCount;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // NODE_NODEEVENTS_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/null.cpp b/libs/yaml-cpp/src/null.cpp
index 1b24b70..e229951 100644
--- a/libs/yaml-cpp/src/null.cpp
+++ b/libs/yaml-cpp/src/null.cpp
@@ -1,5 +1,5 @@
-#include "yaml-cpp/null.h"
+#include "null.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 _Null Null;
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/ostream_wrapper.cpp b/libs/yaml-cpp/src/ostream_wrapper.cpp
index 357fc00..46a84f3 100644
--- a/libs/yaml-cpp/src/ostream_wrapper.cpp
+++ b/libs/yaml-cpp/src/ostream_wrapper.cpp
@@ -1,10 +1,10 @@
-#include "yaml-cpp/ostream_wrapper.h"
+#include "ostream_wrapper.h"
 
 #include <algorithm>
 #include <cstring>
 #include <iostream>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 ostream_wrapper::ostream_wrapper()
     : m_buffer(1, '\0'),
       m_pStream(0),
@@ -54,4 +54,4 @@ void ostream_wrapper::update_pos(char ch) {
     m_comment = false;
   }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/parse.cpp b/libs/yaml-cpp/src/parse.cpp
index 1ef474d..d6d9362 100644
--- a/libs/yaml-cpp/src/parse.cpp
+++ b/libs/yaml-cpp/src/parse.cpp
@@ -1,14 +1,14 @@
-#include "yaml-cpp/node/parse.h"
+#include "node/parse.h"
 
 #include <fstream>
 #include <sstream>
 
-#include "yaml-cpp/node/node.h"
-#include "yaml-cpp/node/impl.h"
-#include "yaml-cpp/parser.h"
+#include "node/node.h"
+#include "node/impl.h"
+#include "parser.h"
 #include "nodebuilder.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 Node Load(const std::string& input) {
   std::stringstream stream(input);
   return Load(stream);
@@ -65,4 +65,4 @@ std::vector<Node> LoadAllFromFile(const std::string& filename) {
     throw BadFile();
   return LoadAll(fin);
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/parser.cpp b/libs/yaml-cpp/src/parser.cpp
index 538d0be..4501827 100644
--- a/libs/yaml-cpp/src/parser.cpp
+++ b/libs/yaml-cpp/src/parser.cpp
@@ -5,10 +5,10 @@
 #include "scanner.h"     // IWYU pragma: keep
 #include "singledocparser.h"
 #include "token.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
-#include "yaml-cpp/parser.h"
+#include "exceptions.h"  // IWYU pragma: keep
+#include "parser.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class EventHandler;
 
 Parser::Parser() {}
@@ -125,4 +125,4 @@ void Parser::PrintTokens(std::ostream& out) {
     m_pScanner->pop();
   }
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/ptr_stack.h b/libs/yaml-cpp/src/ptr_stack.h
index f378ffc..3a0899d 100644
--- a/libs/yaml-cpp/src/ptr_stack.h
+++ b/libs/yaml-cpp/src/ptr_stack.h
@@ -12,10 +12,10 @@
 #include <memory>
 #include <vector>
 
-#include "yaml-cpp/noncopyable.h"
+#include "noncopyable.h"
 
 template <typename T>
-class ptr_stack : private YAML::noncopyable {
+class ptr_stack : private YAML_NAMESPACE::noncopyable {
  public:
   ptr_stack() {}
   ~ptr_stack() { clear(); }
diff --git a/libs/yaml-cpp/src/ptr_vector.h b/libs/yaml-cpp/src/ptr_vector.h
index a546a89..f2f9b8c 100644
--- a/libs/yaml-cpp/src/ptr_vector.h
+++ b/libs/yaml-cpp/src/ptr_vector.h
@@ -12,12 +12,12 @@
 #include <memory>
 #include <vector>
 
-#include "yaml-cpp/noncopyable.h"
+#include "noncopyable.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 
 template <typename T>
-class ptr_vector : private YAML::noncopyable {
+class ptr_vector : private YAML_NAMESPACE::noncopyable {
  public:
   ptr_vector() {}
   ~ptr_vector() { clear(); }
@@ -44,6 +44,6 @@ class ptr_vector : private YAML::noncopyable {
  private:
   std::vector<T*> m_data;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // PTR_VECTOR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/regex_yaml.cpp b/libs/yaml-cpp/src/regex_yaml.cpp
index 20b7720..1e9b2e1 100644
--- a/libs/yaml-cpp/src/regex_yaml.cpp
+++ b/libs/yaml-cpp/src/regex_yaml.cpp
@@ -1,6 +1,6 @@
 #include "regex_yaml.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 // constructors
 RegEx::RegEx() : m_op(REGEX_EMPTY) {}
 
@@ -42,4 +42,4 @@ RegEx operator+(const RegEx& ex1, const RegEx& ex2) {
   ret.m_params.push_back(ex2);
   return ret;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/regex_yaml.h b/libs/yaml-cpp/src/regex_yaml.h
index 3fa7327..ee84136 100644
--- a/libs/yaml-cpp/src/regex_yaml.h
+++ b/libs/yaml-cpp/src/regex_yaml.h
@@ -10,7 +10,9 @@
 #include <string>
 #include <vector>
 
-namespace YAML {
+#include "version.h"
+
+YAML_NAMESPACE_ENTER
 class Stream;
 
 enum REGEX_OP {
@@ -78,7 +80,7 @@ class RegEx {
   char m_a, m_z;
   std::vector<RegEx> m_params;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #include "regeximpl.h"
 
diff --git a/libs/yaml-cpp/src/regeximpl.h b/libs/yaml-cpp/src/regeximpl.h
index 709124f..563ff13 100644
--- a/libs/yaml-cpp/src/regeximpl.h
+++ b/libs/yaml-cpp/src/regeximpl.h
@@ -11,7 +11,7 @@
 #include "stringsource.h"
 #include "streamcharsource.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 // query matches
 inline bool RegEx::Matches(char ch) const {
   std::string str;
@@ -181,6 +181,6 @@ inline int RegEx::MatchOpSeq(const Source& source) const {
 
   return offset;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // REGEXIMPL_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/scanner.cpp b/libs/yaml-cpp/src/scanner.cpp
index 680c73b..00979ea 100644
--- a/libs/yaml-cpp/src/scanner.cpp
+++ b/libs/yaml-cpp/src/scanner.cpp
@@ -4,9 +4,9 @@
 #include "exp.h"
 #include "scanner.h"
 #include "token.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
+#include "exceptions.h"  // IWYU pragma: keep
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 Scanner::Scanner(std::istream& in)
     : INPUT(in),
       m_startedStream(false),
@@ -383,4 +383,4 @@ void Scanner::ThrowParserException(const std::string& msg) const {
   }
   throw ParserException(mark, msg);
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/scanner.h b/libs/yaml-cpp/src/scanner.h
index b0ac6d9..14a27b7 100644
--- a/libs/yaml-cpp/src/scanner.h
+++ b/libs/yaml-cpp/src/scanner.h
@@ -18,9 +18,9 @@
 #include "ptr_vector.h"
 #include "stream.h"
 #include "token.h"
-#include "yaml-cpp/mark.h"
+#include "mark.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Node;
 class RegEx;
 
@@ -130,6 +130,6 @@ class Scanner {
   ptr_vector<IndentMarker> m_indentRefs;  // for "garbage collection"
   std::stack<FLOW_MARKER> m_flows;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // SCANNER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/scanscalar.cpp b/libs/yaml-cpp/src/scanscalar.cpp
index 8253b8d..43af377 100644
--- a/libs/yaml-cpp/src/scanscalar.cpp
+++ b/libs/yaml-cpp/src/scanscalar.cpp
@@ -5,9 +5,9 @@
 #include "exp.h"
 #include "regeximpl.h"
 #include "stream.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
+#include "exceptions.h"  // IWYU pragma: keep
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 // ScanScalar
 // . This is where the scalar magic happens.
 //
@@ -218,4 +218,4 @@ std::string ScanScalar(Stream& INPUT, ScanScalarParams& params) {
 
   return scalar;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/scanscalar.h b/libs/yaml-cpp/src/scanscalar.h
index 62da13c..017c9c2 100644
--- a/libs/yaml-cpp/src/scanscalar.h
+++ b/libs/yaml-cpp/src/scanscalar.h
@@ -12,7 +12,7 @@
 #include "regex_yaml.h"
 #include "stream.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 enum CHOMP { STRIP = -1, CLIP, KEEP };
 enum ACTION { NONE, BREAK, THROW };
 enum FOLD { DONT_FOLD, FOLD_BLOCK, FOLD_FLOW };
@@ -56,6 +56,6 @@ struct ScanScalarParams {
 };
 
 std::string ScanScalar(Stream& INPUT, ScanScalarParams& info);
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // SCANSCALAR_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/scantag.cpp b/libs/yaml-cpp/src/scantag.cpp
index c5b3965..ed062e4 100644
--- a/libs/yaml-cpp/src/scantag.cpp
+++ b/libs/yaml-cpp/src/scantag.cpp
@@ -2,10 +2,10 @@
 #include "regex_yaml.h"
 #include "regeximpl.h"
 #include "stream.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
-#include "yaml-cpp/mark.h"
+#include "exceptions.h"  // IWYU pragma: keep
+#include "mark.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 const std::string ScanVerbatimTag(Stream& INPUT) {
   std::string tag;
 
@@ -78,4 +78,4 @@ const std::string ScanTagSuffix(Stream& INPUT) {
 
   return tag;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/scantag.h b/libs/yaml-cpp/src/scantag.h
index 522ba54..03fccab 100644
--- a/libs/yaml-cpp/src/scantag.h
+++ b/libs/yaml-cpp/src/scantag.h
@@ -10,10 +10,10 @@
 #include <string>
 #include "stream.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 const std::string ScanVerbatimTag(Stream& INPUT);
 const std::string ScanTagHandle(Stream& INPUT, bool& canBeHandle);
 const std::string ScanTagSuffix(Stream& INPUT);
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // SCANTAG_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/scantoken.cpp b/libs/yaml-cpp/src/scantoken.cpp
index 180ad00..f437b37 100644
--- a/libs/yaml-cpp/src/scantoken.cpp
+++ b/libs/yaml-cpp/src/scantoken.cpp
@@ -8,10 +8,10 @@
 #include "scantag.h"  // IWYU pragma: keep
 #include "tag.h"      // IWYU pragma: keep
 #include "token.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
-#include "yaml-cpp/mark.h"
+#include "exceptions.h"  // IWYU pragma: keep
+#include "mark.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 ///////////////////////////////////////////////////////////////////////
 // Specialization for scanning specific tokens
 
@@ -433,4 +433,4 @@ void Scanner::ScanBlockScalar() {
   token.value = scalar;
   m_tokens.push(token);
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/setting.h b/libs/yaml-cpp/src/setting.h
index 3ff8c20..b807c7b 100644
--- a/libs/yaml-cpp/src/setting.h
+++ b/libs/yaml-cpp/src/setting.h
@@ -9,9 +9,9 @@
 
 #include <memory>
 #include <vector>
-#include "yaml-cpp/noncopyable.h"
+#include "noncopyable.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class SettingChangeBase;
 
 template <typename T>
@@ -94,6 +94,6 @@ class SettingChanges : private noncopyable {
   typedef std::vector<SettingChangeBase*> setting_changes;
   setting_changes m_settingChanges;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // SETTING_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/simplekey.cpp b/libs/yaml-cpp/src/simplekey.cpp
index 70f56b6..cc5161f 100644
--- a/libs/yaml-cpp/src/simplekey.cpp
+++ b/libs/yaml-cpp/src/simplekey.cpp
@@ -1,7 +1,7 @@
 #include "scanner.h"
 #include "token.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Mark;
 
 Scanner::SimpleKey::SimpleKey(const Mark& mark_, std::size_t flowLevel_)
@@ -125,4 +125,4 @@ void Scanner::PopAllSimpleKeys() {
   while (!m_simpleKeys.empty())
     m_simpleKeys.pop();
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/singledocparser.cpp b/libs/yaml-cpp/src/singledocparser.cpp
index cde1d20..e1c9133 100644
--- a/libs/yaml-cpp/src/singledocparser.cpp
+++ b/libs/yaml-cpp/src/singledocparser.cpp
@@ -7,12 +7,12 @@
 #include "singledocparser.h"
 #include "tag.h"
 #include "token.h"
-#include "yaml-cpp/emitterstyle.h"
-#include "yaml-cpp/eventhandler.h"
-#include "yaml-cpp/exceptions.h"  // IWYU pragma: keep
-#include "yaml-cpp/mark.h"
+#include "emitterstyle.h"
+#include "eventhandler.h"
+#include "exceptions.h"  // IWYU pragma: keep
+#include "mark.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 SingleDocParser::SingleDocParser(Scanner& scanner, const Directives& directives)
     : m_scanner(scanner),
       m_directives(directives),
@@ -410,4 +410,4 @@ anchor_t SingleDocParser::LookupAnchor(const Mark& mark,
 
   return it->second;
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/singledocparser.h b/libs/yaml-cpp/src/singledocparser.h
index ed0aad5..071f269 100644
--- a/libs/yaml-cpp/src/singledocparser.h
+++ b/libs/yaml-cpp/src/singledocparser.h
@@ -11,10 +11,10 @@
 #include <memory>
 #include <string>
 
-#include "yaml-cpp/anchor.h"
-#include "yaml-cpp/noncopyable.h"
+#include "anchor.h"
+#include "noncopyable.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class CollectionStack;
 class EventHandler;
 class Node;
@@ -60,6 +60,6 @@ class SingleDocParser : private noncopyable {
 
   anchor_t m_curAnchor;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // SINGLEDOCPARSER_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/stream.cpp b/libs/yaml-cpp/src/stream.cpp
index 3b013cf..b7c2c7d 100644
--- a/libs/yaml-cpp/src/stream.cpp
+++ b/libs/yaml-cpp/src/stream.cpp
@@ -11,7 +11,7 @@
 
 #define CP_REPLACEMENT_CHARACTER (0xFFFD)
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 enum UtfIntroState {
   uis_start,
   uis_utfbe_b1,
@@ -445,4 +445,4 @@ void Stream::StreamInUtf32() const {
 
   QueueUnicodeCodepoint(m_readahead, ch);
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/stream.h b/libs/yaml-cpp/src/stream.h
index 42d542d..ed8365a 100644
--- a/libs/yaml-cpp/src/stream.h
+++ b/libs/yaml-cpp/src/stream.h
@@ -7,8 +7,8 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/noncopyable.h"
-#include "yaml-cpp/mark.h"
+#include "noncopyable.h"
+#include "mark.h"
 #include <cstddef>
 #include <deque>
 #include <ios>
@@ -16,7 +16,7 @@
 #include <set>
 #include <string>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class Stream : private noncopyable {
  public:
   friend class StreamCharSource;
@@ -71,6 +71,6 @@ inline bool Stream::ReadAheadTo(size_t i) const {
     return true;
   return _ReadAheadTo(i);
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // STREAM_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/streamcharsource.h b/libs/yaml-cpp/src/streamcharsource.h
index 624599e..df453d4 100644
--- a/libs/yaml-cpp/src/streamcharsource.h
+++ b/libs/yaml-cpp/src/streamcharsource.h
@@ -7,10 +7,10 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/noncopyable.h"
+#include "noncopyable.h"
 #include <cstddef>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class StreamCharSource {
  public:
   StreamCharSource(const Stream& stream) : m_offset(0), m_stream(stream) {}
@@ -43,6 +43,6 @@ inline const StreamCharSource StreamCharSource::operator+(int i) const {
     source.m_offset = 0;
   return source;
 }
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // STREAMCHARSOURCE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/stringsource.h b/libs/yaml-cpp/src/stringsource.h
index 6fee44b..555db5e 100644
--- a/libs/yaml-cpp/src/stringsource.h
+++ b/libs/yaml-cpp/src/stringsource.h
@@ -9,7 +9,7 @@
 
 #include <cstddef>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 class StringCharSource {
  public:
   StringCharSource(const char* str, std::size_t size)
@@ -43,6 +43,6 @@ class StringCharSource {
   std::size_t m_size;
   std::size_t m_offset;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // STRINGSOURCE_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/tag.cpp b/libs/yaml-cpp/src/tag.cpp
index 5143552..6a76416 100644
--- a/libs/yaml-cpp/src/tag.cpp
+++ b/libs/yaml-cpp/src/tag.cpp
@@ -5,7 +5,7 @@
 #include "tag.h"
 #include "token.h"
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 Tag::Tag(const Token& token) : type(static_cast<TYPE>(token.data)) {
   switch (type) {
     case VERBATIM:
@@ -46,4 +46,4 @@ const std::string Tag::Translate(const Directives& directives) {
   }
   throw std::runtime_error("yaml-cpp: internal error, bad tag type");
 }
-}
+YAML_NAMESPACE_EXIT
diff --git a/libs/yaml-cpp/src/tag.h b/libs/yaml-cpp/src/tag.h
index ac30673..b08ac9d 100644
--- a/libs/yaml-cpp/src/tag.h
+++ b/libs/yaml-cpp/src/tag.h
@@ -9,7 +9,7 @@
 
 #include <string>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 struct Directives;
 struct Token;
 
@@ -28,6 +28,6 @@ struct Tag {
   TYPE type;
   std::string handle, value;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // TAG_H_62B23520_7C8E_11DE_8A39_0800200C9A66
diff --git a/libs/yaml-cpp/src/token.h b/libs/yaml-cpp/src/token.h
index ad0b7d0..3d27845 100644
--- a/libs/yaml-cpp/src/token.h
+++ b/libs/yaml-cpp/src/token.h
@@ -7,12 +7,12 @@
 #pragma once
 #endif
 
-#include "yaml-cpp/mark.h"
+#include "mark.h"
 #include <iostream>
 #include <string>
 #include <vector>
 
-namespace YAML {
+YAML_NAMESPACE_ENTER
 const std::string TokenNames[] = {
     "DIRECTIVE", "DOC_START", "DOC_END", "BLOCK_SEQ_START", "BLOCK_MAP_START",
     "BLOCK_SEQ_END", "BLOCK_MAP_END", "BLOCK_ENTRY", "FLOW_SEQ_START",
@@ -64,6 +64,6 @@ struct Token {
   std::vector<std::string> params;
   int data;
 };
-}
+YAML_NAMESPACE_EXIT
 
 #endif  // TOKEN_H_62B23520_7C8E_11DE_8A39_0800200C9A66
