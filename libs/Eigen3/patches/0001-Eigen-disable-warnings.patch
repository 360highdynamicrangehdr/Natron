diff --git a/libs/Eigen3/Eigen/src/Core/Assign.h b/libs/Eigen3/Eigen/src/Core/Assign.h
index f48173172..557d94ea3 100644
--- a/libs/Eigen3/Eigen/src/Core/Assign.h
+++ b/libs/Eigen3/Eigen/src/Core/Assign.h
@@ -47,14 +47,14 @@ private:
     StorageOrdersAgree = (int(Derived::IsRowMajor) == int(OtherDerived::IsRowMajor)),
     MightVectorize = StorageOrdersAgree
                   && (int(Derived::Flags) & int(OtherDerived::Flags) & ActualPacketAccessBit),
-    MayInnerVectorize  = MightVectorize && int(InnerSize)!=Dynamic && int(InnerSize)%int(PacketSize)==0
+    MayInnerVectorize  = bool(MightVectorize) && int(InnerSize)!=Dynamic && int(InnerSize)%int(PacketSize)==0
                        && int(DstIsAligned) && int(SrcIsAligned),
     MayLinearize = StorageOrdersAgree && (int(Derived::Flags) & int(OtherDerived::Flags) & LinearAccessBit),
-    MayLinearVectorize = MightVectorize && MayLinearize && DstHasDirectAccess
-                       && (DstIsAligned || MaxSizeAtCompileTime == Dynamic),
+    MayLinearVectorize = bool(MightVectorize) && bool(MayLinearize) && bool(DstHasDirectAccess)
+                       && (bool(DstIsAligned) || MaxSizeAtCompileTime == Dynamic),
       /* If the destination isn't aligned, we have to do runtime checks and we don't unroll,
          so it's only good for large enough sizes. */
-    MaySliceVectorize  = MightVectorize && DstHasDirectAccess
+    MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                        && (int(InnerMaxSize)==Dynamic || int(InnerMaxSize)>=3*PacketSize)
       /* slice vectorization can be slow, so we only want it if the slices are big, which is
          indicated by InnerMaxSize rather than InnerSize, think of the case of a dynamic block
@@ -399,7 +399,7 @@ struct assign_impl<Derived1, Derived2, LinearVectorizedTraversal, NoUnrolling, V
       dstAlignment = PacketTraits::AlignedOnScalar ? Aligned : int(assign_traits<Derived1,Derived2>::DstIsAligned) ,
       srcAlignment = assign_traits<Derived1,Derived2>::JointAlignment
     };
-    const Index alignedStart = assign_traits<Derived1,Derived2>::DstIsAligned ? 0
+    const Index alignedStart = bool(assign_traits<Derived1,Derived2>::DstIsAligned) ? 0
                              : internal::first_aligned(&dst.coeffRef(0), size);
     const Index alignedEnd = alignedStart + ((size-alignedStart)/packetSize)*packetSize;
 
diff --git a/libs/Eigen3/Eigen/src/Core/products/GeneralMatrixVector.h b/libs/Eigen3/Eigen/src/Core/products/GeneralMatrixVector.h
index 09387703e..e5c5adc9e 100644
--- a/libs/Eigen3/Eigen/src/Core/products/GeneralMatrixVector.h
+++ b/libs/Eigen3/Eigen/src/Core/products/GeneralMatrixVector.h
@@ -405,8 +405,8 @@ EIGEN_DONT_INLINE void general_matrix_vector_product<Index,LhsScalar,RowMajor,Co
     alignmentPattern = AllAligned;
   }
 
-  Index offset1 = (FirstAligned && alignmentStep==1?3:1);
-  Index offset3 = (FirstAligned && alignmentStep==1?1:3);
+  Index offset1 = (bool(FirstAligned) && alignmentStep==1?3:1);
+  Index offset3 = (bool(FirstAligned) && alignmentStep==1?1:3);
 
   Index rowBound = ((rows-skipRows)/rowsAtOnce)*rowsAtOnce + skipRows;
   for (Index i=skipRows; i<rowBound; i+=rowsAtOnce)
diff --git a/libs/Eigen3/Eigen/src/Core/util/DisableStupidWarnings.h b/libs/Eigen3/Eigen/src/Core/util/DisableStupidWarnings.h
index 6a0bf0629..5b6371271 100644
--- a/libs/Eigen3/Eigen/src/Core/util/DisableStupidWarnings.h
+++ b/libs/Eigen3/Eigen/src/Core/util/DisableStupidWarnings.h
@@ -35,6 +35,13 @@
     #pragma clang diagnostic push
   #endif
   #pragma clang diagnostic ignored "-Wconstant-logical-operand"
+
+#elif defined __GNUC__ && __GNUC__>=6
+
+  #ifndef EIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS
+    #pragma GCC diagnostic push
+  #endif
+  #pragma GCC diagnostic ignored "-Wignored-attributes"
 #endif
 
 #endif // not EIGEN_WARNINGS_DISABLED
diff --git a/libs/Eigen3/Eigen/src/Core/util/ReenableStupidWarnings.h b/libs/Eigen3/Eigen/src/Core/util/ReenableStupidWarnings.h
index 5ddfbd4aa..dc6df9306 100644
--- a/libs/Eigen3/Eigen/src/Core/util/ReenableStupidWarnings.h
+++ b/libs/Eigen3/Eigen/src/Core/util/ReenableStupidWarnings.h
@@ -8,6 +8,8 @@
     #pragma warning pop
   #elif defined __clang__
     #pragma clang diagnostic pop
+  #elif defined __GNUC__ && __GNUC__>=6
+    #pragma GCC diagnostic pop
   #endif
 #endif
 
